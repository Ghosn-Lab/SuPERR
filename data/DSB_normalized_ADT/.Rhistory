traces<-isolate(trace_list$traces[[cell_type()]])
xy_features<-isolate(trace_list$xyaxis[[cell_type()]])
annotations<-isolate(trace_list$annotations[[cell_type()]]) #&req(xy_features$xaxis)==Data$xlab&req(xy_feature$yaxis)==Data$y
if (length(traces)>0&&xy_features$xaxis==Data$xlab&&xy_features$yaxis==Data$ylab){
for (i in 1:length(traces)){
a<-add_trace(a,x=traces[[i]]$x,
y=traces[[i]]$y ,
mode=traces[[i]]$mode,
name=traces[[i]]$name,
line=traces[[i]]$line,inherit = F,
type="scatter")
a<-add_annotations(a,text = annotations[[i]]$text,
x = annotations[[i]]$x,
y = annotations[[i]]$y,
showarrow = annotations[[i]]$showarrow
)
}
}
a%>%config(edits = list(annotationText = F,annotationPosition=T),scrollZoom = TRUE)%>%
onRender(js_tracename,data="gateid")%>%
onRender(js_indices,data="traceindex")
})
### log10 XY----
observeEvent(input$log_x,{
if (input$log_x){
axis<-"log"
plotlyProxy("plot1", session) %>%
plotlyProxyInvoke(
"relayout",
xaxis = list(type = axis,zeroline = FALSE,gridcolor = 'ffff'))
}
else{
axis<-"linear"
plotlyProxy("plot1", session) %>%
plotlyProxyInvoke(
"relayout",
xaxis = list(type = axis,zeroline = FALSE,gridcolor = 'ffff'))
}
})
observeEvent(input$log_y,{
if (input$log_y){
axis<-"log"
plotlyProxy("plot1", session) %>%
plotlyProxyInvoke(
"relayout",
yaxis = list(type = axis,zeroline = FALSE,gridcolor = 'ffff'))
}
else{
axis<-"linear"
plotlyProxy("plot1", session) %>%
plotlyProxyInvoke(
"relayout",
yaxis = list(type = axis,zeroline = FALSE,gridcolor = 'ffff'))
}
})
### Print the clicked info----
# output$traceindex<-renderPrint({
#   d<-input$curvnumber
#   if (!is.null(d)){
#     d
#   }
# })
# output$network<-renderPrint({
#   if (length(network$From)==length(network$To)){
#     net<-data.frame(From=network$From,To=network$To,proportion=network$proportion)
#     net
#   }
# })
# output$click<-renderPrint({
#   d <- event_data("plotly_click")
#   if (!is.null(d)) d
# })
output$annotation<-renderPrint({
d <- trace_list$annotations
if (!is.null(d)) d
})
output$tracelist<-renderPrint({
d <- trace_list$traces
if (!is.null(d)) d
})
output$back<-renderPrint({
d <- backup$trace
if (!is.null(d)) d
})
# output$index<-renderPrint({
#   d <- trace_list$index
#   if (!is.null(d)) d
# })
# output$backnet<-renderPrint({
#   d <- backup$network
#   if (!is.null(d)) d
# })
#
# output$backrela<-renderPrint({
#   d <- backup$relation
#   if (!is.null(d)) d
# })
# output$indexlist<-renderPrint({
#   # d <- trace_list$annotations[[input$cell_type()]]
#   d <- trace_list$index
#   if (!is.null(d)) d
# })
# output$xylist<-renderPrint({
#   d <- trace_list$xyaxis
#   if (!is.null(d)) d
# })
### Print the gates' annotation (internal testing)-----
# output$trace<-renderPrint({
#   if (!is.null(trace_list$annotations)) trace_list$annotations
# })
# output$gatename<-renderPrint({
#   e <- input$gateid
#   if (is.null(e)) "Nothing clicked" else e
# })
### Print the info of the selected data (internal testing)-----
output$df<-renderPrint({
if (!is.null(event_data("plotly_selected"))){
cell_name<-event_data("plotly_selected")$key
data.frame(barcode = relation$barcode[relation$barcode%in%cell_name],Gate=relation$Gate[relation$barcode%in%cell_name])
}
})
### Plot figure Tree----
output$plot2<-renderPlotly({
if (length(network$To)>=1){
net<-data.frame(From=network$From,To=network$To,proportion=network$proportion)
meta<-data.frame(name=c("Sample",net$To),proportion=c(1,net$proportion))
g<-graph_from_data_frame(net, directed=TRUE,vertices = meta)
pal <- c(brewer.pal(12, "Set3"),brewer.pal(11, "Spectral"),brewer.pal(8, "Accent"))
pal<-pal[1:nrow(meta)]
names(pal)<-V(g)$name
cell_color(pal)
L <- layout_as_tree(g,root = "Sample")
rownames(L)<-V(g)$name
Node_size<-V(g)$proportion
names(Node_size)<-V(g)$name
#Construct vertices and edges
vs <- V(g)
es <- as.data.frame(get.edgelist(g))
Nv <- length(vs)
Ne <- length(es[1]$V1)
Xn <- L[,1]
Yn <- L[,2]
Data<-data.frame(x=Xn,y=Yn,size=Node_size,name=factor(names(Xn),levels = names(Xn)))
network <- plot_ly(data = Data,x =~x, y =~y, mode = "markers",
text = paste(round(Data$size,4)*100,"%",sep = ''),hoverinfo = 'text',alpha = 2,
name=~name,colors = pal,color = ~name,source = "B")
edge_shapes <- list()
for(i in 1:Ne) {
v0 <- es[i,]$V1
v1 <- es[i,]$V2
edge_shape = list(
type = "line",
line = list(color = "#030303", width = 0.5),
x0 = Xn[v0],
y0 = Yn[v0],
x1 = Xn[v1],
y1 = Yn[v1],
layer="below"
)
edge_shapes[[i]] <- edge_shape
}
axis <- list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE)
fig <- layout(
network,
shapes = edge_shapes,
xaxis = axis,
yaxis = axis
)
# config text
t <- list(
family = "sans serif",
size = 20,
color = toRGB("grey50"))
fig %>%
config(edits = list(annotationText = F,annotationPosition=T),scrollZoom = F)%>%
add_markers(size = ~size,sizes=c(50,500))%>%
add_annotations(x = ~x,
y = ~y+0.2,
text = ~name,
xref = "x",
yref = "y",
showarrow = F
)%>%
layout(showlegend = FALSE)%>%
# highlight(on = "plotly_click",color = "red")%>%
onRender(js_tracename,data="cell_type")
# event_register('plotly_click')
}
else{
pal<-brewer.pal(3, "Set3")
Data<-data.frame(x=0,y=0,name="Sample",size=1)
network <- plot_ly(data = Data,x =~x, y =~y, mode = "markers",
text = paste(round(Data$size,4)*100,"%",sep = ''),hoverinfo = 'text',alpha = 2,
name=~name,colors = pal[1],color = ~name,source = "B")
axis <- list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE)
fig <- layout(
network,
xaxis = axis,
yaxis = axis
)
fig %>%
config(edits = list(annotationText = F,annotationPosition=F),scrollZoom = F)%>%
add_markers(size = ~size,sizes=700)%>%
add_annotations(x = ~x,
y = ~y,
text = ~name,
xref = "x",
yref = "y",
showarrow = F
)%>%
layout(showlegend = FALSE)
}
})
### Add border to the clicked gate----
# observeEvent(event_data("plotly_click",source = "B"),{
#   plotlyProxy("plot2", session) %>%
#     plotlyProxyInvoke(
#       "restyle",
#       list(marker.line=list(color = 'red',width = 4)),event_data("plotly_click",source = "B")$curveNumber
#       )
# })
### Draw gates-----
observeEvent(input$Add,{
# Show notification and interrupt this funtion when the GateName is duplicated
if (input$GateName %in% unique(relation$Gate)){
showNotification("GateName duplicated!",type = "error")
return()
}
a<-event_data("plotly_brushed")
e<-data.frame(x=a$x,y=a$y)
cell_name<-event_data("plotly_selected")$key
relation$Gate[relation$barcode%in%cell_name]<-input$GateName
relation$Parent[relation$barcode%in%cell_name]<-cell_type()
network$From<-c(network$From,cell_type())
network$To<-c(network$To,input$GateName)
network$proportion<-c(network$proportion,length(cell_name)/length(relation$Gate))
trace_list$annotations[[cell_type()]]<-append(trace_list$annotations[[cell_type()]],
list(list(
text = input$GateName,
x = max(e$x),
y = max(e$y),
showarrow = FALSE)))
if (length(trace_list$xyaxis[[cell_type()]])<1){
trace_list$xyaxis[[cell_type()]]<-list(xaxis=Data$xlab,yaxis=Data$ylab)
trace_list$index[[cell_type()]][[input$GateName]]<-input$traceindex
}
else{
trace_list$index[[cell_type()]][[input$GateName]]<-input$traceindex
}
if (nrow(e)>2){
plotlyProxy("plot1", session) %>%
plotlyProxyInvoke(
"addTraces",
list(list(
x = c(e$x,e$x[1]),
y = c(e$y,e$y[1]),
# type = "scatter",
mode = "lines",
name = input$GateName,
line = list(color = "red")
)))%>%
plotlyProxyInvoke(
"relayout",
annotations=trace_list$annotations[[cell_type()]])
trace_list$traces[[cell_type()]]<-append(trace_list$traces[[cell_type()]],
list(list(
x = c(e$x,e$x[1]),
y = c(e$y,e$y[1]),
# type = "scatter",
mode = "lines",
name = input$GateName,
line = list(color = "red")
)))
}
else {
plotlyProxy("plot1", session) %>%
plotlyProxyInvoke(
"addTraces",
list(list(
x = c(e$x[1],e$x[1],e$x[2],e$x[2],e$x[1]),
y = c(e$y[1],e$y[2],e$y[2],e$y[1],e$y[1]),
mode = "lines",
name = input$GateName,
line = list(color = "red")
)))%>%
plotlyProxyInvoke(
"relayout",
annotations=trace_list$annotations[[cell_type()]])
trace_list$traces[[cell_type()]]<-append(trace_list$traces[[cell_type()]],
list(list(
x = c(e$x[1],e$x[1],e$x[2],e$x[2],e$x[1]),
y = c(e$y[1],e$y[2],e$y[2],e$y[1],e$y[1]),
mode = "lines",
name = input$GateName,
line = list(color = "red")
)))
}
})
### Remove single gate-----
observeEvent(input$Remove, {
#Get the children cell types of the deleted gate
net<-data.frame(From=network$From,To=network$To)
Id<-findchild(net=net,gate=input$gateid)
fromId<-Id[Id%in%net$From]
traceID<-event_data("plotly_click")$curveNumber
##backup trace
backup$trace<-append(backup$trace,list(list(list(
Index=trace_list$index[[cell_type()]][[input$gateid]],
xy=trace_list$xyaxis[[cell_type()]],
celltype=cell_type(),
annotation=trace_list$annotations[[cell_type()]][[which(sapply(trace_list$annotations[[cell_type()]], "[[", "text")==input$gateid)]],
trace=trace_list$traces[[cell_type()]][[which(sapply(trace_list$traces[[cell_type()]], "[[", "name")==input$gateid)]]
))))
for (i in fromId){
for (j in 1:length(trace_list$traces[[i]])){
backup$trace[[length(backup$trace)]]<-append(backup$trace[[length(backup$trace)]],
list(list(annotation=trace_list$annotations[[i]][[j]],
Index=trace_list$index[[i]][[j]],
xy=trace_list$xyaxis[[i]],
celltype=i,
trace=trace_list$traces[[i]][[j]]
)))
}
}
##back up ralation
rela<-data.frame(barcode = relation$barcode[relation$Gate%in%Id],
Gate=relation$Gate[relation$Gate%in%Id],
Parent=relation$Parent[relation$Gate%in%Id])
backup$relation<-append(backup$relation,list(rela))
##back up network
net<-data.frame(From=network$From[which(network$To%in%Id)],
To=network$To[which(network$To%in%Id)],
proportion=network$proportion[which(network$To%in%Id)]
)
backup$network<-append(backup$network,list(net))
#Only preserve the last remove
backup$trace<-backup$trace[length(backup$trace)]
backup$relation<-backup$relation[length(backup$relation)]
backup$network<-backup$network[length(backup$network)]
trace_list$annotations[[cell_type()]]<-trace_list$annotations[[cell_type()]][sapply(trace_list$annotations[[cell_type()]], "[[", "text")!=input$gateid]
trace_list$annotations[Id]<-NULL
#Update xy axis
trace_list$xyaxis[Id]<-NULL
if (length(trace_list$traces[[cell_type()]])==1){  #Remove this cell type from the trace list if there is only 1 gate left.
trace_list$xyaxis[[cell_type()]]<-NULL
}
#Update trace list
trace_list$traces[[cell_type()]]<-trace_list$traces[[cell_type()]][sapply(trace_list$traces[[cell_type()]], "[[", "name")!=input$gateid]
trace_list$traces[Id]<-NULL
#Update trace index list
trace_list$index[[cell_type()]][[input$gateid]]<-NULL
trace_list$index[Id]<-NULL
#Update classification
relation$Gate[relation$Gate%in%Id]<-cell_type()
#Update network
if (length(Id)>0){
network$From<-network$From[-which(network$To%in%Id)]
network$proportion<-network$proportion[-which(network$To%in%Id)]
network$To<-network$To[-which(network$To%in%Id)]
}
plotlyProxy("plot1", session) %>%
plotlyProxyInvoke("deleteTraces", traceID)%>%
plotlyProxyInvoke(
"relayout",
annotations=trace_list$annotations[[cell_type()]])
})
### Delete branches----
observeEvent(input$delete, {
# Find the children of the current cell type (inclusive)
net<-data.frame(From=network$From,To=network$To)
AllId<-findchild(net=net,gate=input$cell_type)
Id<-AllId[-1]
fromId<-AllId[AllId%in%net$From]
##backup trace
# backup$trace<-append(backup$trace,list(list(list(
#   Index=trace_list$index[[cell_type()]][[input$gateid]],
#   xy=trace_list$xyaxis[[cell_type()]],
#   celltype=cell_type(),
#   annotation=trace_list$annotations[[cell_type()]][[which(sapply(trace_list$annotations[[cell_type()]], "[[", "text")==input$gateid)]],
#   trace=trace_list$traces[[cell_type()]][[which(sapply(trace_list$traces[[cell_type()]], "[[", "name")==input$gateid)]]
# ))))
backup$trace<-append(backup$trace,list(list()))
for (i in fromId){
for (j in 1:length(trace_list$traces[[i]])){
backup$trace[[length(backup$trace)]]<-append(backup$trace[[length(backup$trace)]],
list(list(annotation=trace_list$annotations[[i]][[j]],
Index=trace_list$index[[i]][[j]],
xy=trace_list$xyaxis[[i]],
celltype=i,
trace=trace_list$traces[[i]][[j]]
)))
}
}
##back up ralation
rela<-data.frame(barcode = relation$barcode[relation$Gate%in%Id],
Gate=relation$Gate[relation$Gate%in%Id],
Parent=relation$Parent[relation$Gate%in%Id])
backup$relation<-append(backup$relation,list(rela))
##back up network
net<-data.frame(From=network$From[which(network$To%in%Id)],
To=network$To[which(network$To%in%Id)],
proportion=network$proportion[which(network$To%in%Id)]
)
backup$network<-append(backup$network,list(net))
#Only preserve the last remove
backup$trace<-backup$trace[length(backup$trace)]
backup$relation<-backup$relation[length(backup$relation)]
backup$network<-backup$network[length(backup$network)]
network$From<-network$From[-which(network$To%in%Id)]
network$proportion<-network$proportion[-which(network$To%in%Id)]
network$To<-network$To[-which(network$To%in%Id)]
# Name these cell by the current node
relation$Gate[relation$Gate%in%Id]<-input$cell_type
# Trace Id that needs to be deleted from the current plot
traceId<-as.numeric(trace_list$index[[cell_type()]][[1]])
traceId<-as.numeric(traceId:(traceId+length(trace_list$index[[cell_type()]])-1))
# Remove the gates in the current plot
trace_list$annotations[AllId]<-NULL
plotlyProxy("plot1", session) %>%
plotlyProxyInvoke("deleteTraces", traceId)%>%
plotlyProxyInvoke(
"relayout",
list(annotations=trace_list$annotations[[cell_type()]]))
# Remove gates's info from the current branch
trace_list$traces[AllId]<-NULL
trace_list$xyaxis[AllId]<-NULL
trace_list$index[AllId]<-NULL
})
### Undo----
observeEvent(input$undo,{
if (length(backup$trace)==0){
showNotification("No more backup",type = "warning")
return()
}
lastrm<-length(backup$trace)
newtraceRoot<-length(trace_list$trace[[cell_type()]])+1
##Add back trace element
for (i in 1:length(backup$trace[[lastrm]])){
celltype<-backup$trace[[lastrm]][[i]]$celltype
gate<-backup$trace[[lastrm]][[i]]$annotation$text
trace_list$annotations[[celltype]]<-
append(trace_list$annotations[[celltype]],
list(backup$trace[[lastrm]][[i]]$annotation
))
trace_list$traces[[celltype]]<-append(trace_list$traces[[celltype]],
list(backup$trace[[lastrm]][[i]]$trace
))
if (length(trace_list$xyaxis[[celltype]])<1){
trace_list$xyaxis[[celltype]]<-backup$trace[[lastrm]][[i]]$xy
trace_list$index[[celltype]][[gate]]<-backup$trace[[lastrm]][[i]]$Index
}
else{
trace_list$index[[celltype]][[gate]]<-backup$trace[[lastrm]][[i]]$Index
}
}
##Add back network elements
network$From<-c(network$From,backup$network[[lastrm]]$From)
network$To<-c(network$To,backup$network[[lastrm]]$To)
network$proportion<-c(network$proportion,backup$network[[lastrm]]$proportion)
##Add back relation elements
relation$Gate[relation$barcode %in% backup$relation[[lastrm]]$barcode]<-backup$relation[[lastrm]]$Gate
relation$Parent[relation$barcode %in% backup$relation[[lastrm]]$barcode]<-backup$relation[[lastrm]]$Parent
if (length(trace_list$traces[[cell_type()]])>=newtraceRoot){
plotlyProxy("plot1", session) %>%
plotlyProxyInvoke(
"addTraces",
trace_list$traces[[cell_type()]][newtraceRoot:length(trace_list$traces[[cell_type()]])]
)%>%
plotlyProxyInvoke(
"relayout",
annotations=trace_list$annotations[[cell_type()]][newtraceRoot:length(trace_list$traces[[cell_type()]])])
}
backup$trace[lastrm]<-NULL
backup$relation[lastrm]<-NULL
backup$network[lastrm]<-NULL
})
}
shinyApp(ui = ui, server = server)
runApp('~/GitHub/SuPERR-seq-Rshiny/test/dash.R')
network<-list(From=c(),To=c())
network
net<-data.frame(From=From,To=To)
net<-data.frame(From=network$From,To=network$To)
net
gate<-"Sample"
findchild<-function(net,gate){
if (!gate%in%net$From){
Id<-gate
}
else{
Id<-gate
To_list<-net$To[net$From==gate]
for (i in 1:length(To_list)){
Id<-c(Id,gate,findchild(net,To_list[i]))
}
}
return(unique(Id))
}
findchild(net,gate )
runApp('~/GitHub/SuPERR-seq-Rshiny/test/dash.R')
runApp('~/GitHub/SuPERR-seq-Rshiny/test/dash.R')
runApp('~/GitHub/SuPERR-seq-Rshiny/test/dash.R')
runApp('~/GitHub/SuPERR-seq-Rshiny/test/dash.R')
colorRampPalette(rev(rainbow(10, end = 4/6)))
runApp('~/GitHub/SuPERR-seq-Rshiny/test/dash.R')
runApp('~/GitHub/SuPERR-seq-Rshiny/test/dash.R')
?eventReactive
runApp('~/GitHub/SuPERR-seq-Rshiny/test/dash.R')
runApp('~/GitHub/SuPERR-seq-Rshiny/test/dash.R')
runApp('~/GitHub/SuPERR-seq-Rshiny/test/dash.R')
DSB_par<-read.csv("C:\\Users\\jyan399\\Documents\\GitHub\\SuPERR-seq-Rshiny\\test\\DSB_par.csv",row.names = "X")
runApp('~/GitHub/SuPERR-seq-Rshiny/test/dash.R')
